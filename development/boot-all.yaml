version: '1'
services:
  zookeeper-temp-task:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper-temp-task
    container_name: zookeeper-temp-task
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker-temp-task:
    image: confluentinc/cp-kafka:7.4.0
    hostname: broker-temp-task
    container_name: broker-temp-task
    depends_on:
      - zookeeper-temp-task
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-temp-task:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-temp-task:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TOOLS_LOG4J_LOGLEVEL: ERROR
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

  kafdrop-temp-task:
    image: obsidiandynamics/kafdrop:3.31.0
    container_name: kafdrop-temp-task
    depends_on:
      - zookeeper-temp-task
      - broker-temp-task
    ports:
      - "8085:9000"
    environment:
      KAFKA_BROKERCONNECT: broker-temp-task:9092

  anomaly-db:
    image: postgres
    ports:
      - "5432:5432"
    shm_size: 128mb
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=anomalies

# required to first build these images & store into local registry
  temperature-analytics-api:
    image: temperature-analytics-api
    ports:
      - "8080:8080"
    depends_on:
      - anomaly-db
      - kafdrop-temp-task
    environment:
      - spring.datasource.url=jdbc:postgresql://host.docker.internal:5432/anomalies
      - spring.cloud.stream.binders.kafka.environment.spring.cloud.stream.kafka.streams.binder.brokers=broker-temp-task:9092

  anomaly-detector:
    image: anomaly-detector
    ports:
      - "8081:8080"
    depends_on:
      - kafdrop-temp-task
    environment:
      - spring.cloud.stream.binders.kafka.environment.spring.cloud.stream.kafka.streams.binder.brokers=broker-temp-task:9092

  temperature-generator:
    image: temperature-generator
    ports:
      - "8082:8080"
    depends_on:
      - kafdrop-temp-task
    environment:
      - spring.cloud.stream.kafka.binder.brokers=broker-temp-task:9092